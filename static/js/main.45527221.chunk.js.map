{"version":3,"sources":["api/consts.ts","api/api.ts","components/CharacterCard/CharaterCard.tsx","components/CharacterCardList/CharacterCardList.tsx","components/CharacterStats/CharacterStats.tsx","components/CharacterFilters/CharacterFilters.tsx","App.tsx","index.tsx"],"names":["CHARACTER","getData","url","fetch","then","response","json","getMoreCharacters","pageNumber","CharacterCard","card","image","origin","name","status","imageUrl","className","src","alt","classNames","characterCard__status_red","characterCard__status_gray","CharacterList","characterCards","setSelectedId","map","onClick","id","CharacterStats","selectedId","closeStats","useState","character","setCharacter","lastEpisode","setLastEpisode","useEffect","data","episode","length","type","gender","species","color","height","width","CharacterFilters","selectedFilters","setSelectedFilters","filter","placeholder","options","setOptions","value","label","isMulti","onChange","filters","App","isLoading","setIsLoading","characters","setCharacters","setPageNumber","selectedStatus","setSelectedStatus","selectedGenders","setSelectedGenders","results","preparedCharacters","useMemo","preparedFilters","preparedFiltersGender","preparedFiltersStatus","isFilterChosen","some","element","includes","isGenderChosen","isStatusChosen","console","log","currentPageNumber","newPageNumber","prevData","disabled","ReactDOM","render","document","getElementById"],"mappings":"oSACaA,EAAY,YCEZC,EAAU,SAACC,GAAD,OACrBC,MAAM,GAAD,ODJiB,mCCIjB,YAAgBD,IAClBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAQlBC,EAAoB,SAACC,GAAD,OAC/BP,EAAQ,GAAD,OAAID,EAAJ,kBAAuBQ,K,gCCLnBC,EAAiC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAE7CC,EACED,EADFC,MAAOC,EACLF,EADKE,OAAQC,EACbH,EADaG,KAAMC,EACnBJ,EADmBI,OAEjBC,EAAWJ,EAEjB,OACE,qCACE,qBACEK,UAAU,qBACVC,IAAKF,EACLG,IAAKR,EAAKG,OAGZ,sBAAKG,UAAU,yBAAf,UACE,qBAAKA,UAAU,sBAAf,SACGH,IAGH,sBAAKG,UAAU,sBAAf,UACE,qBAAKA,UAAWG,IAAW,wBACzB,CAAEC,0BAAsC,SAAXN,GAC7B,CAAEO,2BAAuC,YAAXP,IAFhC,SAIGA,IAGH,sBAAKE,UAAU,0BAAf,UACE,sBAAMA,UAAU,gCAAhB,uBAGC,IACAJ,EAAOC,kBC/BPS,G,MAAiC,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,cAC/D,OACE,qBAAKR,UAAU,gBAAf,SACGO,EAAeE,KAAI,SAAAf,GAAI,OACtB,wBACEM,UAAU,gBAEVU,QAAS,kBAAMF,EAAcd,EAAKiB,KAHpC,SAKE,cAAC,EAAD,CAAejB,KAAMA,KAHhBA,EAAKiB,WCLPC,G,MAAkC,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,WAC5D,EAAkCC,mBAAsB,MAAxD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,qBAAtC,mBAAOG,EAAP,KAAoBC,EAApB,KAeA,OAbAC,qBAAU,WHEwB,IAACT,EGDjCM,EAAa,OHCoBN,EGAZE,EHCvB5B,EAAQ,GAAD,OAAID,EAAJ,YAAiB2B,KGAnBvB,MAAK,SAAAiC,GACJJ,EAAaI,MAEjB,OAAIL,QAAJ,IAAIA,KAAWM,SACbnC,MAAK,OAAC6B,QAAD,IAACA,OAAD,EAACA,EAAWM,SAAiB,OAATN,QAAS,IAATA,OAAA,EAAAA,EAAWM,QAAQC,QAAS,IAClDnC,MAAK,SAAAiC,GAAI,OAAIA,EAAK/B,UAClBF,MAAK,SAAAiC,GAAI,OAAIF,EAAeE,EAAKxB,WAErC,CAACgB,IAECG,EAaH,qCACE,wBACEQ,KAAK,SACLxB,UAAU,OACVU,QAAS,kBAAMI,OAEjB,sBAAKd,UAAU,0BAAf,UAEE,wBACEwB,KAAK,SACLxB,UAAU,2BACVU,QAAS,kBAAMI,KAHjB,eAQA,qBACEd,UAAU,sBACVC,IAAG,UAAKe,EAAUrB,OAClBO,IAAG,UAAKc,EAAUnB,QAGpB,qBAAKG,UAAU,gCAAf,SACGgB,EAAUnB,OAGb,uBACEG,UAAU,iBADZ,SAGE,gCACE,+BACE,oBAAIA,UAAU,uBAAd,SACE,uBAAMA,UAAU,uBAAhB,oBAEG,IACAgB,EAAUS,YAIf,oBAAIzB,UAAU,uBAAd,SACE,uBAAMA,UAAU,uBAAhB,qBAEG,IACAgB,EAAUU,aAIf,oBAAI1B,UAAU,uBAAd,SACE,uBAAMA,UAAU,uBAAhB,sBAEG,IACAgB,EAAUpB,OAAOC,UAIrBqB,GACC,oBAAIlB,UAAU,uBAAd,SACE,uBAAMA,UAAU,uBAAhB,0BAEG,IACAkB,oBAvEf,qBAAKlB,UAAU,0BAAf,SACE,cAAC,OAAD,CACE2B,MAAM,OACNC,OAAQ,IACRC,MAAO,U,QCtBJC,EAAoC,SAAC,GACyB,IAAzEC,EAAwE,EAAxEA,gBAAgBC,EAAwD,EAAxDA,mBAAoBC,EAAoC,EAApCA,OAAQjC,EAA4B,EAA5BA,UAAWkC,EAAiB,EAAjBA,YACvD,EAA8BnB,mBAAgD,IAA9E,mBAAOoB,EAAP,KAAgBC,EAAhB,KASA,OAPAhB,qBAAU,WACRgB,EAAWH,EAAOxB,KAAI,SAAAe,GAAI,MAAK,CAC7Ba,MAAOb,EACPc,MAAOd,SAEN,IAGH,qBAAKxB,UAAWA,EAAhB,SACE,cAAC,IAAD,CACEmC,QAASA,EACTI,SAAO,EACPF,MAAON,EACPS,SAAU,SAACC,GAAD,OAAaT,EAAmBS,IAC1CP,YAAaA,OCpBRQ,EAAgB,WAC3B,MAAkC3B,oBAAkB,GAApD,mBAAO4B,EAAP,KAAkBC,EAAlB,KACA,EAAoC7B,mBAAsB,IAA1D,mBAAO8B,EAAP,KAAmBC,EAAnB,KACA,EAAoC/B,mBAAiB,GAArD,mBAAOvB,EAAP,KAAmBuD,EAAnB,KACA,EAAoChC,mBAAwB,MAA5D,mBAAOF,EAAP,KAAmBL,EAAnB,KACA,EAA8CO,mBAAgD,IAA9F,mBAAOgB,EAAP,KAAwBC,EAAxB,KACA,EAA4CjB,mBAAgD,IAA5F,mBAAOiC,EAAP,KAAuBC,EAAvB,KACA,EAA8ClC,mBAAgD,IAA9F,mBAAOmC,EAAP,KAAwBC,EAAxB,KAEA/B,qBAAU,WACRwB,GAAa,GACbrD,EAAkBC,GACfJ,MAAK,SAAAiC,GAAI,OAAIyB,EAAczB,EAAK+B,YACnCR,GAAa,KACZ,IAEH,IAeMS,EAAqBC,mBAAQ,WAEjC,IAAMC,EAAkBxB,EAAgBtB,KAAI,SAAAwB,GAAM,OAAIA,EAAOI,SACvDmB,EAAwBN,EAAgBzC,KAAI,SAAAwB,GAAM,OAAIA,EAAOI,SAC7DoB,EAAwBT,EAAevC,KAAI,SAAAwB,GAAM,OAAIA,EAAOI,SAkBlE,OAhBwBQ,EAAWZ,QACjC,SAAAjB,GACE,IAAM0C,GAAiBH,EAAgBhC,QAASgC,EAAgBI,MAAK,SAAAC,GAAO,OACxEA,EAAQC,SAAS7C,EAAUU,YAEzBoC,GAAiBN,EAAsBjC,QACzCiC,EAAsBG,MAAK,SAAAC,GAAO,OAAIA,EAAQC,SAAS7C,EAAUS,WAG/DsC,GAAiBN,EAAsBlC,QACzCkC,EAAsBE,MAAK,SAAAC,GAAO,OAAIA,EAAQC,SAAS7C,EAAUlB,WAGrE,OAAO4D,GAAkBI,GAAkBC,OAI9C,CAAChC,EAAiBc,EAAYG,EAAgBE,IAEjDc,QAAQC,IAAIZ,GAUZ,OACE,sBAAKrD,UAAU,eAAf,UACE,sBAAKA,UAAU,wBAAf,UACE,cAAC,EAAD,CACE+B,gBAAiBA,EACjBC,mBAAoBA,EACpBhC,UAAU,eACViC,OAfQ,CACd,QAAS,QAAS,WAClB,gBAAiB,eAAgB,UACjC,SAAU,UAAW,QAAS,aAAc,UAatCC,YAAa,mBAGf,cAAC,EAAD,CACEH,gBAAiBiB,EACjBhB,mBAAoBiB,EACpBjD,UAAW,eACXiC,OAlBO,CAAC,QAAS,OAAQ,WAmBzBC,YAAa,kBAGf,cAAC,EAAD,CACEH,gBAAiBmB,EACjBlB,mBAAoBmB,EACpBnD,UAAW,eACXiC,OAzBQ,CAAC,SAAU,OAAQ,aAAc,WA0BzCC,YAAa,uBAIfS,IAAcU,EAAmB9B,QAChC,oBAAIvB,UAAU,oBAAd,iCAEH,cAAC,EAAD,CACEQ,cAAeA,EACfD,eAAgB8C,IAGjBV,IAAcE,EAAWtB,QACxB,qBAAKvB,UAAU,cAAf,SACE,cAAC,OAAD,CACE2B,MAAM,OACNC,OAAQ,IACRC,MAAO,QAKZhB,GACC,cAAC,EAAD,CACEA,WAAYA,EACZC,WAAY,kBAAMN,EAAc,SAIpC,wBACER,UAAU,cACVwB,KAAK,SACLd,QA1GW,WACfkC,GAAa,GACbG,GAAc,SAAAmB,GACZ,IAAMC,EAAgBD,EAAoB,EAQ1C,OANA3E,EAAkB4E,GACf/E,MAAK,SAAAiC,GACJyB,GAAc,SAAAsB,GAAQ,4BAAQA,GAAR,YAAqB/C,EAAK+B,aAChDR,GAAa,MAGVuB,MAgGLE,SAAU1B,EAJZ,2BC9HN2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.45527221.chunk.js","sourcesContent":["export const BASE_URL = 'https://rickandmortyapi.com/api/';\nexport const CHARACTER = 'character';\n","import { Card, CharacterCards } from '../components/types';\nimport { BASE_URL, CHARACTER } from './consts';\n\nexport const getData = (url: string) => (\n  fetch(`${BASE_URL}/${url}`)\n    .then(response => response.json())\n);\n\nexport const get = (url: string) => (\n  fetch(url)\n    .then(response => response.json())\n);\n\nexport const getMoreCharacters = (pageNumber: number): Promise<CharacterCards> => (\n  getData(`${CHARACTER}/?page=${pageNumber}`)\n);\n\nexport const getSelectedCharacter = (id: number): Promise<Card> => (\n  getData(`${CHARACTER}/${id}`)\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Card } from '../types';\nimport './CharaterCard.scss';\n\ntype Props = {\n  card: Card;\n};\n\nexport const CharacterCard: React.FC<Props> = ({ card }) => {\n  const {\n    image, origin, name, status,\n  } = card;\n  const imageUrl = image;\n\n  return (\n    <>\n      <img\n        className=\"characterCard__img\"\n        src={imageUrl}\n        alt={card.name}\n      />\n\n      <div className=\"characterCard__wrapper\">\n        <div className=\"characterCard__name\">\n          {name}\n        </div>\n\n        <div className=\"characterCard__info\">\n          <div className={classNames('characterCard__status',\n            { characterCard__status_red: status === 'Dead' },\n            { characterCard__status_gray: status === 'unknown' })}\n          >\n            {status}\n          </div>\n\n          <div className=\"characterCard__location\">\n            <span className=\"characterCard__location-title\">\n              Location:\n            </span>\n            {' '}\n            {origin.name}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { Card } from '../types';\nimport { CharacterCard } from '../CharacterCard/CharaterCard';\nimport './characterList.scss';\n\ntype Props = {\n  setSelectedId: (id: number | null) => void;\n  characterCards: Card[];\n};\n\nexport const CharacterList: React.FC<Props> = ({ characterCards, setSelectedId }) => {\n  return (\n    <div className=\"characterList\">\n      {characterCards.map(card => (\n        <button\n          className=\"characterCard\"\n          key={card.id}\n          onClick={() => setSelectedId(card.id)}\n        >\n          <CharacterCard card={card} />\n        </button>\n      ))}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Oval } from 'react-loader-spinner';\nimport { Card } from '../types';\nimport { getSelectedCharacter } from '../../api/api';\nimport './CharacterStats.scss';\n\ntype Props = {\n  selectedId: number;\n  closeStats: () => void;\n};\n\nexport const CharacterStats: React.FC<Props> = ({ selectedId, closeStats }: Props) => {\n  const [character, setCharacter] = useState<Card | null>(null);\n  const [lastEpisode, setLastEpisode] = useState<string>();\n\n  useEffect(() => {\n    setCharacter(null);\n    getSelectedCharacter(selectedId)\n      .then(data => {\n        setCharacter(data);\n      });\n    if (character?.episode) {\n      fetch(character?.episode[character?.episode.length - 1])\n        .then(data => data.json())\n        .then(data => setLastEpisode(data.name));\n    }\n  }, [selectedId]);\n\n  if (!character) {\n    return (\n      <div className=\"characterStats__content\">\n        <Oval\n          color=\"#000\"\n          height={150}\n          width={150}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"blur\"\n        onClick={() => closeStats()}\n      />\n      <div className=\"characterStats__content\">\n\n        <button\n          type=\"button\"\n          className=\"characterStats__closeBtn\"\n          onClick={() => closeStats()}\n        >\n          X\n        </button>\n\n        <img\n          className=\"characterStats__img\"\n          src={`${character.image}`}\n          alt={`${character.name}`}\n        />\n\n        <div className=\"characterStats__content__name\">\n          {character.name}\n        </div>\n\n        <table\n          className=\"characterStats\"\n        >\n          <tbody>\n            <tr>\n              <td className=\"characterStats__name\">\n                <span className=\"characterStats__info\">\n                  Gender:\n                  {' '}\n                  {character.gender}\n                </span>\n              </td>\n\n              <td className=\"characterStats__stat\">\n                <span className=\"characterStats__info\">\n                  Species:\n                  {' '}\n                  {character.species}\n                </span>\n              </td>\n\n              <td className=\"characterStats__stat\">\n                <span className=\"characterStats__info\">\n                  Location:\n                  {' '}\n                  {character.origin.name}\n                </span>\n              </td>\n\n              {lastEpisode && (\n                <td className=\"characterStats__stat\">\n                  <span className=\"characterStats__info\">\n                    Last episode:\n                    {' '}\n                    {lastEpisode}\n                  </span>\n                </td>\n              )}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\r\nimport Select, { MultiValue } from 'react-select';\r\nimport {ReactSelectOption} from \"../types\";\r\n\r\ninterface Props {\r\n  selectedFilters: MultiValue<ReactSelectOption<string>>;\r\n  setSelectedFilters: (filters: MultiValue<ReactSelectOption<string>>) => void;\r\n  className: string;\r\n  filter: string[];\r\n  placeholder: string;\r\n};\r\n\r\nexport const CharacterFilters: React.FC<Props> = ({\r\n  selectedFilters,setSelectedFilters, filter, className, placeholder}) => {\r\n  const [options, setOptions] = useState<MultiValue<ReactSelectOption<string>>>([]);\r\n\r\n  useEffect(() => {\r\n    setOptions(filter.map(type => ({\r\n      value: type,\r\n      label: type,\r\n    })))\r\n    }, []);\r\n\r\n  return (\r\n    <div className={className}>\r\n      <Select\r\n        options={options}\r\n        isMulti\r\n        value={selectedFilters}\r\n        onChange={(filters) => setSelectedFilters(filters)}\r\n        placeholder={placeholder}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useMemo, useState } from 'react';\nimport './App.scss';\nimport { Oval } from 'react-loader-spinner';\nimport { MultiValue } from 'react-select';\nimport { getMoreCharacters } from './api/api';\nimport { Card, ReactSelectOption } from './components/types';\nimport { CharacterList } from './components/CharacterCardList/CharacterCardList';\nimport { CharacterStats } from './components/CharacterStats/CharacterStats';\nimport { CharacterFilters } from './components/CharacterFilters/CharacterFilters';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [characters, setCharacters] = useState<Card[] | []>([]);\n  const [pageNumber, setPageNumber] = useState<number>(1);\n  const [selectedId, setSelectedId] = useState<number | null>(null);\n  const [selectedFilters, setSelectedFilters] = useState<MultiValue<ReactSelectOption<string>>>([]);\n  const [selectedStatus, setSelectedStatus] = useState<MultiValue<ReactSelectOption<string>>>([]);\n  const [selectedGenders, setSelectedGenders] = useState<MultiValue<ReactSelectOption<string>>>([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getMoreCharacters(pageNumber)\n      .then(data => setCharacters(data.results));\n    setIsLoading(false);\n  }, []);\n\n  const loadMore = () => {\n    setIsLoading(true);\n    setPageNumber(currentPageNumber => {\n      const newPageNumber = currentPageNumber + 1;\n\n      getMoreCharacters(newPageNumber)\n        .then(data => {\n          setCharacters(prevData => [...prevData, ...data.results]);\n          setIsLoading(false);\n        });\n\n      return newPageNumber;\n    }), [pageNumber];\n  };\n\n  const preparedCharacters = useMemo(() => {\n\n    const preparedFilters = selectedFilters.map(filter => filter.value);\n    const preparedFiltersGender = selectedGenders.map(filter => filter.value);\n    const preparedFiltersStatus = selectedStatus.map(filter => filter.value);\n\n    const filterBySpecies = characters.filter(\n      character => {\n        const isFilterChosen = preparedFilters.length ? preparedFilters.some(element =>\n            element.includes(character.species)) : true;\n\n        const isGenderChosen = preparedFiltersGender.length\n          ? preparedFiltersGender.some(element => element.includes(character.gender))\n          : true;\n\n        const isStatusChosen = preparedFiltersStatus.length\n          ? preparedFiltersStatus.some(element => element.includes(character.status))\n          : true;\n\n        return isFilterChosen && isGenderChosen && isStatusChosen;\n      });\n\n    return filterBySpecies;\n  }, [selectedFilters, characters, selectedStatus, selectedGenders]);\n\n  console.log(preparedCharacters)\n\n  const species = [\n    'Human', 'Alien', 'Humanoid',\n    'Poopybutthole', 'Mythological', 'Unknown',\n    'Animal', 'Disease', 'Robot', 'Cronenberg', 'Planet',\n  ];\n  const status = [\"Alive\", \"Dead\", \"Unknown\"];\n  const genders = [\"Female\", \"Male\", \"Genderless\", \"Unknown\"];\n\n  return (\n    <div className=\"App__wrapper\">\n      <div className=\"App__CharacterFilters\">\n        <CharacterFilters\n          selectedFilters={selectedFilters}\n          setSelectedFilters={setSelectedFilters}\n          className=\"App__filters\"\n          filter={species}\n          placeholder={'Select species'}\n        />\n\n        <CharacterFilters\n          selectedFilters={selectedStatus}\n          setSelectedFilters={setSelectedStatus}\n          className={\"App__filters\"}\n          filter={status}\n          placeholder={'Select status'}\n        />\n\n        <CharacterFilters\n          selectedFilters={selectedGenders}\n          setSelectedFilters={setSelectedGenders}\n          className={\"App__filters\"}\n          filter={genders}\n          placeholder={'Select genders'}\n        />\n      </div>\n\n      {!isLoading && !preparedCharacters.length\n      && <h2 className=\"App__noCharacters\">Have not characters</h2>}\n\n      <CharacterList\n        setSelectedId={setSelectedId}\n        characterCards={preparedCharacters}\n      />\n\n      {isLoading && !characters.length && (\n        <div className=\"App__loader\">\n          <Oval\n            color=\"#000\"\n            height={150}\n            width={150}\n          />\n        </div>\n      )}\n\n      {selectedId && (\n        <CharacterStats\n          selectedId={selectedId}\n          closeStats={() => setSelectedId(null)}\n        />\n      )}\n\n      <button\n        className=\"App__button\"\n        type=\"button\"\n        onClick={loadMore}\n        disabled={isLoading}\n      >\n        Load more\n      </button>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}